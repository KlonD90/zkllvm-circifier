//===-- EVMISelDAGToDAG.cpp - A dag to dag inst selector for EVM ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the EVM target.
//
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/EVMMCTargetDesc.h"
#include "EVM.h"
#include "EVMTargetMachine.h"
#include "llvm/CodeGen/FunctionLoweringInfo.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "evm-isel"

// EVM-specific code to select EVM machine instructions for
// SelectionDAG operations.
namespace {
class EVMDAGToDAGISel final : public SelectionDAGISel {
  EVMSubtarget *Subtarget;

public:
  explicit EVMDAGToDAGISel(EVMTargetMachine &TargetMachine)
      : SelectionDAGISel(TargetMachine) {
      }

  StringRef getPassName() const override {
    return "EVM DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = const_cast<EVMSubtarget*>(&MF.getSubtarget<EVMSubtarget>());
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void PostprocessISelDAG() override;
  void PreprocessISelDAG() override;

  void Select(SDNode *Node) override;

  bool SelectLOAD(SDNode *Node);

  bool SelectSTORE(SDNode *Node);

  // custom selecting
  bool SelectSETCC(SDNode *Node);
  bool SelectSELECT_CC(SDNode *Node);
  bool SelectBlockAddress(SDNode *Node);
  bool SelectSIGNEXTEND(SDNode *Node);
  bool SelectCall(SDNode *Node);

// Include the pieces autogenerated from the target description.
#include "EVMGenDAGISel.inc"

private:
  void MutateReturnChain();
};
}

void EVMDAGToDAGISel::MutateReturnChain() {
  DenseMap<const Function*, SDNode*> Fn2RetAddr;

  std::set<SDNode *> AlteredReturnNodes;

  // first iteration: find the return address
  for (SelectionDAG::allnodes_iterator I = CurDAG->allnodes_begin(),
                                       E = CurDAG->allnodes_end();
       I != E;) {
    SDNode *Node = &*I++;

    unsigned Opcode = Node->getOpcode();
    if (Opcode == EVMISD::STACKARG) {
      unsigned idx =Node->getConstantOperandVal(0);
      if (idx != 0) continue;
      Fn2RetAddr[FuncInfo->Fn] = Node;
    }
  }

  // second iteration: find return instructions and add the return
  // address to the end of the return node
  for (SelectionDAG::allnodes_iterator I = CurDAG->allnodes_begin(),
                                       E = CurDAG->allnodes_end();
       I != E;) {
    SDNode *Node = &*I++;

    unsigned Opcode = Node->getOpcode();
    if (Opcode == EVMISD::RET_FLAG) {
      // skip already altered return nodes
      if (AlteredReturnNodes.find(Node) !=
          AlteredReturnNodes.end())
        continue;

      SDNode *ArgNode = Fn2RetAddr[FuncInfo->Fn];

      SmallVector<SDValue, 4> RetOps;

      RetOps.append(Node->op_begin(), Node->op_end());
      RetOps.push_back(SDValue(ArgNode, 0));


      SDValue NewNode = CurDAG->getNode(EVMISD::RET_FLAG,
          SDLoc(Node),
          MVT::Other, RetOps);

      --I;
      CurDAG->ReplaceAllUsesWith(Node, &NewNode);
      ++I;
      CurDAG->DeleteNode(Node);
      AlteredReturnNodes.insert(NewNode.getNode());
    }
  }

}

void EVMDAGToDAGISel::PreprocessISelDAG() {
  // disable it since it is not working.
  //this->MutateReturnChain();
}

void EVMDAGToDAGISel::PostprocessISelDAG() {

}

bool EVMDAGToDAGISel::SelectLOAD(SDNode *Node) {
  const LoadSDNode *LD = cast<LoadSDNode>(Node);

  switch (LD->getExtensionType()) {
    case ISD::EXTLOAD:
    case ISD::SEXTLOAD:
    case ISD::ZEXTLOAD: {
      auto Op0 = LD->getOperand(0);
      SDValue Src = LD->getBasePtr();
      auto ExtSizeInBits = LD->getMemoryVT().getSizeInBits();
      assert(ExtSizeInBits <= 128);

      constexpr uint16_t LoadOpcodes[] = {
          EVM::MLOAD8_r, EVM::MLOAD16_r, EVM::MLOAD32_r, EVM::MLOAD64_r,
          EVM::INVALID, EVM::MLOAD_r};
      int index = Log2_64(ExtSizeInBits) - 3;
      assert(index >= 0);
      assert(unsigned(index) < sizeof(LoadOpcodes)/sizeof(LoadOpcodes[0]));
      unsigned Opcode = LoadOpcodes[index];
      if (Opcode == EVM::INVALID) {
        Node->dump();
        report_fatal_error("Invalid LOAD size");
      }
      SDNode* Load = CurDAG->getMachineNode(Opcode, SDLoc(Node), MVT::i256,
                                            MVT::Other, Src, Op0);
      if (LD->getExtensionType() == ISD::SEXTLOAD) {
        auto ExtSizeInBytes = ExtSizeInBits / 8;
        SDValue Bytes = CurDAG->getConstant(ExtSizeInBytes - 1, SDLoc(Node),
                                           MVT::i256);
        SDValue Size = SDValue(CurDAG->getMachineNode(EVM::PUSH32_r,
                                                      SDLoc(Node),
                                                      MVT::i256, Bytes), 0);
        MachineSDNode * signextend = CurDAG->getMachineNode(
            EVM::SIGNEXTEND_r, SDLoc(Node), MVT::i256,
            {Size, SDValue(Load, 0)});

        ReplaceUses(SDValue(Node, 0), SDValue(signextend, 0));
      }
      ReplaceNode(Node, Load);
      return true;
    }
    case ISD::NON_EXTLOAD: {
      //llvm_unreachable("unimplemented");
      return false;
    }
  }
  return false;
}

bool EVMDAGToDAGISel::SelectSTORE(SDNode *Node) {
  StoreSDNode *ST = dyn_cast<StoreSDNode>(Node);
  assert(ST != nullptr && "Must be a store node");

  auto StoreVT = ST->getMemoryVT();
  if (StoreVT != MVT::i256) {
    auto Op = ST->getOperand(1);
    unsigned Opcode = EVM::MSTORE_r;

    switch (StoreVT.getFixedSizeInBits()) {
    case 128:
        llvm_unreachable("128 store is not supported!");
    case 64:
        Opcode = EVM::MSTORE64_r;
        break;
    case 32:
        Opcode = EVM::MSTORE32_r;
        break;
    case 16:
        Opcode = EVM::MSTORE16_r;
        break;
    case 8:
        Opcode = EVM::MSTORE8_r;
        break;
    default:
        llvm_unreachable("Unsupported type!");
    }

    MachineSDNode *Store =
        CurDAG->getMachineNode(Opcode, SDLoc(Node), MVT::Other,
                               Node->getOperand(2), Op, Node->getOperand(0));

    ReplaceNode(Node, Store);
    return true;
  }

  return false;
}

bool EVMDAGToDAGISel::SelectBlockAddress(SDNode *Node) {
  BlockAddressSDNode* ba = cast<BlockAddressSDNode>(Node);

  SDValue tba = CurDAG->getTargetBlockAddress(ba->getBlockAddress(), MVT::i256);
  MachineSDNode *push =
      CurDAG->getMachineNode(EVM::PUSH32_r, SDLoc(Node), MVT::i256, tba);

  ReplaceNode(Node, push);
  return true;
}

bool EVMDAGToDAGISel::SelectSIGNEXTEND(SDNode *Node) {
  unsigned opcode = Node->getOpcode();
  assert(opcode == EVMISD::SIGNEXTEND);

  const SDValue reg = Node->getOperand(1);
  const SDValue shift = Node->getOperand(0);

  MachineSDNode *signextend = CurDAG->getMachineNode(
      EVM::SIGNEXTEND_r, SDLoc(Node), MVT::i256, shift, reg);

  ReplaceNode(Node, signextend);
  return true;
}

bool EVMDAGToDAGISel::SelectCall(SDNode *Node) {
  unsigned opcode = Node->getOpcode();
  assert (opcode == EVMISD::CALL || opcode == EVMISD::CALLVOID);
  bool isVoid = opcode == EVMISD::CALLVOID;
  unsigned mopcode = isVoid ? EVM::pJUMPSUBVOID_r : EVM::pJUMPSUB_r;

  const SDValue &Chain = Node->getOperand(0);
  const SDValue &Callee = Node->getOperand(1);
  // construct return
  SmallVector<SDValue, 8> opsVec;
  SDValue CalleeOperand;

  for (unsigned i = 2; i < Node->getNumOperands(); ++i) {
      opsVec.push_back(Node->getOperand(i));
  }

  if (Callee.getOpcode() == EVMISD::WRAPPER) {
      // get the jump target.
      const SDValue &target = Callee.getOperand(0);

      // we put the target at the back of the operands, it becomes:
      // pJUMPSUB arg1, arg2, arg3, ..., targetAddr
      // stack status is:
      // (top) arg1, arg2, arg3, ..., targetAddr
      // we need to have return address, which is best to be fixed in position:
      // 1. PUSH retAddr (PC + offset)
      // 2. swap retAddr and targetAddr

      MachineSDNode *push =
          CurDAG->getMachineNode(EVM::PUSH32_r, SDLoc(Node), MVT::i256, target);
      SDValue pushVal = SDValue(push, 0);
      CalleeOperand = pushVal;
  } else {
      CalleeOperand = Callee;
  }
  opsVec.push_back(CalleeOperand);
  opsVec.push_back(Chain);

  ArrayRef<SDValue> ops(opsVec);

  MachineSDNode *call =
      CurDAG->getMachineNode(mopcode, SDLoc(Node), Node->getVTList(), ops);

  ReplaceNode(Node, call);
  return true;
}

bool EVMDAGToDAGISel::SelectSETCC(SDNode *Node) {
  ISD::CondCode cc = cast<CondCodeSDNode>(Node->getOperand(2))->get();


  unsigned firstOpcode;

  switch (cc) {
    case ISD::SETNE:
      // %temp = EQ_r lhs, rhs
      // %rv = NOT %temp
      firstOpcode = EVM::EQ_r;
      break;
    case ISD::SETUGE:
      // %temp = LT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::LT_r;
      break;
    case ISD::SETGE:
      // %temp = SLT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::SLT_r;
      break;
    case ISD::SETULE:
      // %temp = GT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::GT_r;
      break;
    case ISD::SETLE:
      // %temp = SGT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::SGT_r;
      break;
    default:
      // those will be handled by tablegen
      return false;
  }

  const SDValue &LHS = Node->getOperand(0);
  const SDValue &RHS = Node->getOperand(1);

  SDValue eq = SDValue(CurDAG->getMachineNode(firstOpcode, SDLoc(Node),
                                               MVT::i256, LHS, RHS), 0);
  MachineSDNode * ne = CurDAG->getMachineNode(EVM::ISZERO_r, SDLoc(Node),
                                              MVT::i256, eq);
  ReplaceNode(Node, ne);
  return true;
}

bool EVMDAGToDAGISel::SelectSELECT_CC(SDNode *Node) {
  ISD::CondCode cc = cast<CondCodeSDNode>(Node->getOperand(4))->get();

  unsigned firstOpcode;

  switch (cc) {
  case ISD::SETNE:
      // %temp = EQ_r lhs, rhs
      // %rv = NOT %temp
      firstOpcode = EVM::EQ_r;
      break;
  case ISD::SETUGE:
      // %temp = LT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::LT_r;
      break;
  case ISD::SETGE:
      // %temp = SLT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::SLT_r;
      break;
  case ISD::SETULE:
      // %temp = GT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::GT_r;
      break;
  case ISD::SETLE:
      // %temp = SGT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::SGT_r;
      break;
  default:
      // those will be handled by tablegen
      return false;
  }

  const SDValue &LHS = Node->getOperand(0);
  const SDValue &RHS = Node->getOperand(1);

  SDValue eq = SDValue(CurDAG->getMachineNode(firstOpcode, SDLoc(Node),
                                              MVT::i256, LHS, RHS), 0);
  MachineSDNode * ne = CurDAG->getMachineNode(EVM::ISZERO_r, SDLoc(Node),
                                             MVT::i256, eq);
  ReplaceNode(Node, ne);
  return true;
}

void EVMDAGToDAGISel::Select(SDNode *Node) {
  unsigned Opcode = Node->getOpcode();

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << '\n');
    return;
  }

  switch (Opcode) {
    case ISD::LOAD: {
      if (SelectLOAD(Node)) return;
      break;
    }
    case ISD::STORE: {
      if (SelectSTORE(Node)) return;
      break;
    }
    case ISD::SETCC:
      if (SelectSETCC(Node)) return;
      break;
    case ISD::BlockAddress:
      if (SelectBlockAddress(Node)) return;
      break;
    case EVMISD::CALL:
    case EVMISD::CALLVOID:
      if (SelectCall(Node)) return;
      break;
    case EVMISD::SIGNEXTEND:
      if (SelectSIGNEXTEND(Node)) return;
      break;
  }

  SelectCode(Node);
}

// This pass converts a legalized DAG into a EVM-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createEVMISelDag(EVMTargetMachine &TM) {
  return new EVMDAGToDAGISel(TM);
}
